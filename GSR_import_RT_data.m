function GSR_import_RT_data(SubjID, ExpType,  sesN, cfg)

if nargin < 4
    cfg=[];
end

if ~isfield(cfg, 'ForPSPM')
    cfg.ForPSPM=0;
end
% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\eust_abbondanza\Documents\MATLAB\GSR_data\20160326173132elena-bl.dat
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/03/27 16:00:11

%% Initialize variables.
filename_import=sprintf('%s_%s_%d.dat', SubjID, ExpType, sesN);
filename_save=sprintf('%s_%s_%d.mat',SubjID, ExpType, sesN);
delimiter = '\t';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%*s%*s%*s%*s%s%[^\n\r]';
%'%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%s%[^\n\r]'; %%'%*s%*s%s%[^\n\r]';
%formatSpec = '%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%q%[^\n\r]';
%formatSpec1='%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%*q%q%[^\n\r]';
%% Open the text file.
fileID = fopen(filename_import,'r');
dataArray1 = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);
fclose(fileID);

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
fileID = fopen(filename_import,'r');
%dataArray2 = textscan(fileID, formatSpec1, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);
dataArray=dataArray1;
%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Converts strings in the input cell array to numbers. Replaced non-numeric
% strings with NaN.

rawData = dataArray{1};
rawData{1}
rawData{2}
rawData{3}
rawData{4}
% if strcmp(rawData{3}, 'CAL')==0
%     
%     dataArray=dataArray2;
%     raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
%     for col=1:length(dataArray)-1
%         raw(1:length(dataArray{col}),col) = dataArray{col};
%     end
%     numericData = NaN(size(dataArray{1},1),size(dataArray,2));
%     
%     % Converts strings in the input cell array to numbers. Replaced non-numeric
%     % strings with NaN.
%     
%     rawData = dataArray{1};
% end


for row=1:size(rawData, 1);
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
        result = regexp(rawData{row}, regexstr, 'names');
        numbers = result.numbers;
        
        % Detected commas in non-thousand locations.
        invalidThousandsSeparator = false;
        if any(numbers==',');
            thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
            if isempty(regexp(thousandsRegExp, ',', 'once'));
                numbers = NaN;
                invalidThousandsSeparator = true;
            end
        end
        % Convert numeric strings to numbers.
        if ~invalidThousandsSeparator;
            numbers = textscan(strrep(numbers, ',', ''), '%f');
            numericData(row, 1) = numbers{1};
            raw{row, 1} = numbers{1};
        end
    catch me
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
data_array = cell2mat(raw(5:size(raw, 1), 1));

%data_array=medfilt1(data_array, cfg.Median); %(subj_data, 20); %(data_sample, 20);
data_array=1./data_array;
data_array=(movingmean(data_array, cfg.Window))';
figure;
plot(data_array)
xlabel('Time; sr = 50 Hz' );
ylabel('Conductance (Siemens)')
title('Session data preprocessed with Moving Average Filter')
if cfg.ForPSPM
    
    data={data_array(:)};
    filename_pspm=sprintf('%s%d.mat', SubjID(1:2), sesN);
    save(filename_pspm, 'data');
    
end

save(filename_save, 'data_array');
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;